cmake_minimum_required(VERSION 3.4)

project(palindrome)

set(EXECUTABLE_OUTPUT_PATH "bin")

if(MSVC)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${EXECUTABLE_OUTPUT_PATH}")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${EXECUTABLE_OUTPUT_PATH}")
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}")
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${EXECUTABLE_OUTPUT_PATH}")
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${EXECUTABLE_OUTPUT_PATH}")
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}")
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${EXECUTABLE_OUTPUT_PATH}")
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${EXECUTABLE_OUTPUT_PATH}")
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "clang")
  set(CMAKE_CXX_FLAGS "-std=c++11 -O2 -Wall -Wextra -Wmost -Weverything")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "gcc")
  set(CMAKE_CXX_FLAGS "-std=c++11 -O2 -Wall -Wextra")
else()
  set(CMAKE_CXX_FLAGS "-std=c++11 -O2 -Wall")
endif()

add_executable(palindrome lib/main.cpp lib/palindrome.cpp)

enable_testing()

add_test(NAME palindrometest COMMAND palindrome -t)

add_custom_target(cppcheck COMMAND cppcheck -q --enable=all --suppressions-list=suppressions.cfg lib)
add_custom_target(cpplint COMMAND find lib -type f -name '*.cpp' -o -name '*.[ch]' -exec cpplint --filter=-readability/streams,-build/header_guard,-whitespace/parens,-readability/braces,-whitespace/newline,-legal/copyright {} "\;")
add_custom_target(splint COMMAND 	find lib -type f -name '*.c' -exec splint {} "\;")
add_custom_target(vera++ COMMAND find lib -type f -name '*.cpp' -o -name '*.[ch]' -exec vera++ -s {} "\;")

if(${CMAKE_SYSTEM_NAME} MATCHES "SunOS" OR ${CMAKE_SYSTEM_NAME} MATCHES "Haiku")
  add_custom_target(lint)
elseif(CMAKE_GNU_C_MACHINE)
  if(${CMAKE_GNU_C_MACHINE} MATCHES "uclibc")
    add_custom_target(lint)
  endif()
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Minix")
  add_custom_target(lint DEPENDS splint)
elseif(MSVC)
  add_custom_target(lint DEPENDS cppcheck)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Void" OR ${CMAKE_SYSTEM_NAME} MATCHES "OpenBSD")
  add_custom_target(lint DEPENDS cppcheck cpplint splint)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "NetBSD")
  add_custom_target(lint DEPENDS cppcheck splint vera++)
else()
  add_custom_target(lint DEPENDS cppcheck cpplint splint vera++)
endif()

add_custom_target(clean-cmake COMMAND find . -iwholename '*cmake*' -not -name CMakeLists.txt -delete)
